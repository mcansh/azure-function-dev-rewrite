diff --git a/node_modules/@azure/static-web-apps-cli/dist/msha/handlers/function.handler.js b/node_modules/@azure/static-web-apps-cli/dist/msha/handlers/function.handler.js
index 2cc7edb..3d7c701 100644
--- a/node_modules/@azure/static-web-apps-cli/dist/msha/handlers/function.handler.js
+++ b/node_modules/@azure/static-web-apps-cli/dist/msha/handlers/function.handler.js
@@ -19,8 +19,10 @@ core_1.registerProcessExit(() => {
 });
 function injectHeaders(req, host) {
     core_1.logger.silly(`injecting headers to Functions request:`);
-    req.setHeader("x-ms-original-url", encodeURI(new URL(req.path, host).toString()));
-    core_1.logger.silly(` - x-ms-original-url: ${chalk_1.default.yellow(req.getHeader("x-ms-original-url"))}`);
+    if (!req.getHeader("x-ms-original-url")) {
+        req.setHeader("x-ms-original-url", encodeURI(new URL(req.path, host).toString()));
+        core_1.logger.silly(` - x-ms-original-url: ${chalk_1.default.yellow(req.getHeader("x-ms-original-url"))}`);
+    }
     // generate a fake correlation ID
     req.setHeader("x-ms-request-id", `SWA-CLI-${Math.random().toString(36).substring(2).toUpperCase()}`);
     core_1.logger.silly(` - x-ms-request-id: ${chalk_1.default.yellow(req.getHeader("x-ms-request-id"))}`);
diff --git a/node_modules/@azure/static-web-apps-cli/dist/msha/middlewares/request.middleware.js b/node_modules/@azure/static-web-apps-cli/dist/msha/middlewares/request.middleware.js
index 51a42cc..cc3649a 100644
--- a/node_modules/@azure/static-web-apps-cli/dist/msha/middlewares/request.middleware.js
+++ b/node_modules/@azure/static-web-apps-cli/dist/msha/middlewares/request.middleware.js
@@ -251,8 +251,7 @@ async function requestMiddleware(req, res, proxyApp, userConfig) {
         }
         return await auth_handler_1.handleAuthRequest(req, res, matchingRouteRule, userConfig);
     }
-    response_middleware_1.getResponse(req, res, matchingRouteRule, userConfig, isFunctionReq);
-    if (!isFunctionReq) {
+     if (!response_middleware_1.getResponse(req, res, matchingRouteRule, userConfig, isFunctionReq)) {
         core_1.logger.silly(` - url: ${chalk_1.default.yellow(req.url)}`);
         core_1.logger.silly(` - target: ${chalk_1.default.yellow(target)}`);
         serveStaticOrProxyReponse(req, res, proxyApp, target);
diff --git a/node_modules/@azure/static-web-apps-cli/dist/msha/middlewares/response.middleware.js b/node_modules/@azure/static-web-apps-cli/dist/msha/middlewares/response.middleware.js
index 5ccfe06..c66d278 100644
--- a/node_modules/@azure/static-web-apps-cli/dist/msha/middlewares/response.middleware.js
+++ b/node_modules/@azure/static-web-apps-cli/dist/msha/middlewares/response.middleware.js
@@ -18,25 +18,33 @@ function getResponse(req, res, matchedRoute, userConfig, isFunctionRequest) {
     core_1.logger.silly({ userConfig });
     if (redirect) {
         core_1.logger.silly(` - redirect rule detected. Exit`);
-        return routes_engine_1.applyRedirectResponse(req, res, matchedRoute);
+        routes_engine_1.applyRedirectResponse(req, res, matchedRoute);
+        return false
     }
+    // We should always set the x-ms-original-url to be the full request URL.
+    req.headers["x-ms-original-url"] = new URL(req.url, `http://${req.headers.host}`).href;
     if (rewrite) {
         req.url = rewrite;
     }
     if ([403, 401].includes(statusCodeToServe)) {
         core_1.logger.silly(` - ${statusCodeToServe} code detected. Exit`);
-        return error_page_handler_1.handleErrorPage(req, res, statusCodeToServe, userConfig === null || userConfig === void 0 ? void 0 : userConfig.responseOverrides);
+        error_page_handler_1.handleErrorPage(req, res, statusCodeToServe, userConfig === null || userConfig === void 0 ? void 0 : userConfig.responseOverrides);
+        return false
     }
     if (isFunctionRequest) {
-        return function_handler_1.handleFunctionRequest(req, res);
+        function_handler_1.handleFunctionRequest(req, res);
+        return true
     }
     const storageResult = getStorageContent(req, res, rewrite, matchedRoute, userConfig === null || userConfig === void 0 ? void 0 : userConfig.responseOverrides, userConfig === null || userConfig === void 0 ? void 0 : userConfig.navigationFallback, userConfig === null || userConfig === void 0 ? void 0 : userConfig.mimeTypes, matchedRoute === null || matchedRoute === void 0 ? void 0 : matchedRoute.headers, userConfig === null || userConfig === void 0 ? void 0 : userConfig.globalHeaders);
     if (storageResult.isFunctionFallbackRequest) {
-        return function_handler_1.handleFunctionRequest(req, res);
+        req.url = userConfig?.navigationFallback.rewrite;
+        function_handler_1.handleFunctionRequest(req, res);
+        return true
     }
     if (statusCodeToServe) {
         res.statusCode = statusCodeToServe;
     }
+    return false
 }
 exports.getResponse = getResponse;
 function getStorageContent(req, res, pathToServe, matchedRoute, responseOverridesRule, navigationFallbackRule, mimeTypeRule, routeHeaders, globalHeaders) {
